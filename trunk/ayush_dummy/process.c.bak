/**
 * @group: S11-G22
 * @file: process.c
 * @date: 2011/05/22
 * @brief: Contains functions for manipulating processes
 * 	including the scheduler and context saving functions
 */

#include "process.h"
#include "init.h"
#include "timer.h"


#define MESSAGE_HEADER_OFFSET 64

extern SINT32 Counter2;
/**
 * @brief: Initialize scheduler by creating ready and blocked 
 *	queues and setting the running process to NULL
 */
void scheduler_init()
{
	TRACE("scheduler_init()\r\n");

	ready_queue = malloc(sizeof(struct queue));
	queue_init(ready_queue);

	blocked_queue = malloc(sizeof(struct queue));
	queue_init(blocked_queue);

	running_process = NULL;
}

/**
 * @brief: Select a process to run based on priority
 */
void scheduler_run()
{
	TRACE("scheduler_run()\r\n");

	if (ready_queue->head == NULL
		|| running_process->priority <= ready_queue->head->priority)
		return;

	if (running_process != NULL)
	{
		/* Swap out runnning process */
		save_context(running_process->ID);
		enqueue(ready_queue, 
				running_process->ID, 
				running_process->priority);
		running_process->state = STATE_READY;
	}

	/* Swap in new running process */
	int new_running_process_ID = dequeue(ready_queue);

	TRACE("new process_ID = ");
	TRACE(itoa(new_running_process_ID));
	TRACE("\r\n");

	running_process = get_proc(new_running_process_ID);
	load_context(new_running_process_ID);
}

/**
 * @brief: Enqueue the running process onto the blocked_queue and update
 * 	the state information. Does not block I-processes.
 * @param: block_type An integer representing the cause of the block
 */
void block_running_process(int block_type)
{
	if (running_process == NULL || running_process->is_iprocess)
		return;

	save_context(running_process->ID);
	running_process->state = STATE_BLOCKED;
	running_process->block_type = block_type;

	/* Store the system call that caused the block so that it can be 
	 * run again once the process becomes unblocked */
	if (block_type == BLOCK_RECEIVE)
		running_process->pending_sys_call = SYS_CALL_RECEIVE_MESSAGE;
	else if (block_type == BLOCK_MEMORY)
		running_process->pending_sys_call = SYS_CALL_REQUEST_MEMORY_BLOCK;

	enqueue(blocked_queue,
			running_process->ID,
			running_process->priority);

	running_process = NULL;
}

/**
 * @brief: If process_ID is specified then process with given process_ID
 *	is moved to the ready_queue regardless of block_type. If process_ID 
 *	is NULL then the FIFO 1st process in the blocked_queue with the
 *	given block_type is moved to the ready_queue
 * @param: process_ID The ID of the process to be unblocked; can be NULL
 * @param: block_type The block type of the process to dequeue from the
 *	blocked_queue; can be NULL
 */
void unblock_process(int process_ID, int block_type)
{
	if (process_ID != NULL)
	{
		if (process_ID < 0 || process_ID >= NUM_PROCS)
			return;

		if (remove(blocked_queue, process_ID) == RTX_SUCCESS)
		{
			struct process *p = get_proc(process_ID);
			p->state = STATE_READY;
			p->block_type = BLOCK_NONE;
			enqueue(ready_queue,
					p->ID,
					p->priority);
		}
	}
	else if (block_type != NULL)
	{
		struct queue_node *node = blocked_queue->head;
		struct process *proc;

		/* Search for appropriate node to unblock */
		while (node != NULL)
		{
			proc = get_proc(node->value);
			if (proc->block_type == block_type)
			{
				remove(blocked_queue, proc->ID);
				proc->state = STATE_READY;
				proc->block_type = BLOCK_NONE;
				enqueue(ready_queue,
						proc->ID,
						proc->priority);
			}

			node = node->next;
		}
	}
	else
		return;
}

/**
 * @brief: Swaps the currently running process with the next one in the
 *	ready queue
 */
int k_release_processor()
{
	TRACE("k_release_processor()\r\n");

	//switch between processes 
	//in order to get the previous process
	save_context(running_process->ID);
	
	if(running_process->state == STATE_RUNNING){
		running_process->state = STATE_READY;

		/* Add to ready queue if not an I-process */
		if (!running_process->is_iprocess)
		{
			enqueue(ready_queue, 
					running_process->ID, 
					running_process->priority);
		}

		running_process = NULL;
	}

	return RTX_SUCCESS;
}

void save_context(int process_ID)
{
	TRACE("save_context()\r\n");
	struct process * curr_process;
	curr_process = get_proc(process_ID);

	TRACE("Current Process= " );
	TRACE( itoa(curr_process) );
	TRACE("\r\n");

	asm("move.l %%d5, %0" : "=m" (curr_process->curr_SP));

	asm("move.l %%d0, %0" : "=m" (curr_process->d0));
	asm("move.l %%d1, %0" : "=m" (curr_process->d1));
	asm("move.l %%d2, %0" : "=m" (curr_process->d2));
	asm("move.l %%d3, %0" : "=m" (curr_process->d3));
	asm("move.l %%d4, %0" : "=m" (curr_process->d4));
	asm("move.l %%d6, %0" : "=m" (curr_process->d6));
	asm("move.l %%d7, %0" : "=m" (curr_process->d7));
	asm("move.l %%a0, %0" : "=m" (curr_process->a0));
	asm("move.l %%a1, %0" : "=m" (curr_process->a1));
	asm("move.l %%a2, %0" : "=m" (curr_process->a2));
	asm("move.l %%a3, %0" : "=m" (curr_process->a3));
	asm("move.l %%a4, %0" : "=m" (curr_process->a4));
	asm("move.l %%a5, %0" : "=m" (curr_process->a5));
}

void load_context(int process_ID)
{
	TRACE("load_context()\r\n");
	struct process *next_process = 
	next_process = get_proc(process_ID);
	int *sp = next_process->curr_SP;
	
	if(sp != NULL)
	{
		if (next_process->state == STATE_READY)
		{	next_process->state = STATE_RUNNING;
			TRACE("Loading context of ready process\n\r" );
			asm("move.l %0, %%d5" : : "m" (sp));

			asm("move.l %0, %%d0" : : "m" (next_process->d0));
			asm("move.l %0, %%d1" : : "m" (next_process->d1));
			asm("move.l %0, %%d2" : : "m" (next_process->d2));
			asm("move.l %0, %%d3" : : "m" (next_process->d3));
			asm("move.l %0, %%d4" : : "m" (next_process->d4));
			asm("move.l %0, %%d6" : : "m" (next_process->d6));
			asm("move.l %0, %%d7" : : "m" (next_process->d7));
			asm("move.l %0, %%a0" : : "m" (next_process->a0));
			asm("move.l %0, %%a1" : : "m" (next_process->a1));
			asm("move.l %0, %%a2" : : "m" (next_process->a2));
			asm("move.l %0, %%a3" : : "m" (next_process->a3));
			asm("move.l %0, %%a4" : : "m" (next_process->a4));
			asm("move.l %0, %%a5" : : "m" (next_process->a5));
		}
		else {
			TRACE("Loading context of new process\r\n");
			next_process->state = STATE_RUNNING;
			asm("move.l %0, %%a7" : : "m" (sp));
			asm("rte");
		}
	
	}
}

struct process * get_proc(int process_ID)
{
	return &(all_processes[process_ID]);
}

/**
 * @brief: Set the process priority 
 * @param: process_ID Process to be modified
 * @param: priority The priority the process will be set to
 * @return: int Returns 0 on success, -1 otherwise
 */
int k_set_process_priority(int process_ID, int priority)
{
	TRACE("k_set_process_priority()\r\n" );

	/* Check for invalid priorities */
	if (priority > PRIORITY_3 || priority < PRIORITY_0)
		return RTX_ERROR;

	/* Don't need to change anything */
	if (priority == k_get_process_priority(process_ID))
		return RTX_SUCCESS;

	int state = get_proc(process_ID)->state;

	if (state == STATE_RUNNING)
	{
		get_proc(process_ID)->priority = priority;
	}
	else if (state == STATE_BLOCKED)
	{
		remove(blocked_queue, process_ID);
		get_proc(process_ID)->priority = priority;
		enqueue(blocked_queue, process_ID, priority);
	}
	else
	{
		remove(ready_queue, process_ID);
		get_proc(process_ID)->priority = priority;
		enqueue(ready_queue, process_ID, priority);
	}

	return RTX_SUCCESS;
}

/**
 * @brief: Return the priority of a given process
 * @param: process_ID The process id of the process
 * @return: int Returns priority if successful, -1 otherwise
 */ 
int k_get_process_priority(int process_ID)
{
	TRACE("k_get_process_priority\r\n");
	return get_proc(process_ID)->priority;
}

/**
 * @brief: Send a message in a message envelope to another process
 * @param: process_ID The ID of the process the message is being sent to
 * @param: message_envelope Memory data block containing the message envelope
 * @return: 0 on success, -1 otherwise
 */
int k_send_message(int process_ID, void *message_envelope)
{
	TRACE("k_send_message()\r\n");
	/* Check if given parameters are invalid */
	if (process_ID < 0 || process_ID > NUM_PROCS ||  message_envelope == NULL)
		return RTX_ERROR;

	/* Populate header fields */
	struct envelope *e = (struct envelope *)message_envelope;
	e->sender_process_ID = running_process->ID;
	e->dest_process_ID = process_ID;
	e->next = NULL;
	e->message = message_envelope + MESSAGE_HEADER_OFFSET;

	struct process *dest_process;
	dest_process = get_proc(process_ID);
	
	/* Add message to process mailbox */
	if (dest_process->mailbox_head == NULL)
		dest_process->mailbox_head = e;
	else
		dest_process->mailbox_tail->next = e;

	dest_process->mailbox_tail = e;

	/* Unblock destination process if it is blocked on receive */
	if(dest_process->state == STATE_BLOCKED 
		&& dest_process->block_type == BLOCK_RECEIVE)
	{
		unblock_process(process_ID, NULL);
	}

	return RTX_SUCCESS;
}

/**
 * @brief: Receive message from process mailbox. Blocks the calling process
 * 	if the maailbox is empty
 * @param: sender_ID Filled by the function with the message sender's ID
 * @return: Pointer to a message envelope struct
 */
void *k_receive_message(int *sender_ID)
{
	TRACE("k_receive_message()\r\n");
	/* Check if there is a message waiting in mailbox; blocking the
	 * process if there isn't */
	if(running_process->mailbox_head == NULL)
	{
		TRACE("Mailbox is empty! Blocking process\r\n");

		/* Mailbox is empty! Block the process */
		block_running_process(BLOCK_RECEIVE);

		return NULL;
	}
	else
	{
		TRACE("Mailbox is NOT empty\r\n");
		/* else grab the first message and remove it from the mailbox */
		struct envelope *e = running_process->mailbox_head;

		/* If popping mailbox with one element */
		if (running_process->mailbox_head == running_process->mailbox_tail)
			running_process->mailbox_tail = NULL;

		running_process->mailbox_head = e->next;

		/* Set sender_ID return parameter and return pointer to envelope */
		if (sender_ID != NULL)
			*sender_ID = e->sender_process_ID;
			
		TRACE ( " Recieve done " );	
		return e;
	}
}


/* 
 * @brief:send delay takes a send message and delays and it till the delay time 
   enqueues the message in the delay_send_queue
 */

void k_send_delay(int process_ID, void * MessageEnvelope, int delay)
{
	int TimeAdded_delay;
	TimeAdded_delay = Counter2 + delay;
	
	if ( TimeAdded_delay > Counter2){
		d_enqueue(delayed_send_queue, process_ID, MessageEnvelope, TimeAdded_delay);
	}
	
}
